<!DOCTYPE html>
<html>
<head>
    <title>Tableau de Bord - Machines Virtuelles</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function(){
            setInterval(function(){
                $("#tableau").load(location.href + " #tableau");
            }, 30000);
        });
    </script>
    <style>
        .header {
            background-color: black;
            color: white;
            padding: 10px 0;
            text-align: center;
        }
        .dark {
            background-color: black;
            color: white;
        }
    </style>
</head>
<body><br>
    <header class="header">
        <br>
        <h2>Bienvenue sur votre tableau de bord</h2>
        <br>
    </header>
    <br>
    <div class="container container-fluid"><hr>
        <div id="tableau"><br>
            <h4>Etat des machines virtuelles en temps réel</h4><br>
            <div class="table-responsive">
                <table class="table table-striped table-hover table-bordered">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>CPU Use (%)</th>
                            <th>RAM Use (%)</th>
                            <th>Total RAM (MB)</th>
                            <th>Free RAM (MB)</th>
                            <th>Network</th>
                            <th>Disk Use (%)</th>
                            <th>Total Disk Space (GB)</th>
                            <th>Free Disk Space (GB)</th>
                        </tr>
                    </thead> 
                    <tbody>
                        {% for machine in machines_virtuelles %}
                            <tr>
                                <td>{{ machine[0] }}</td>
                                <td>{{ machine[1] }}%</td>
                                <td>{{ machine[2] }}%</td>
                                <td>{{ machine[3] }}</td>
                                <td>{{ machine[4] }}</td>
                                <td>
                                    <details>
                                        <summary>Statistiques Réseau</summary>
                                        <pre>{{ machine[5].replace('\\n', '\n') }}</pre>
                                    </details>
                                </td>
                                <td>{{ machine[6] }}</td>
                                <td>{{ machine[7] }}</td>
                                <td>{{ machine[8] }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            </div><br> <hr>
            <div class="container container-fluid"><br>
            <h4>Graphique en temps réel</h4><br>
                <div class="col-md-12">
                    <canvas id="myChart"></canvas>
                </div><br>
                <div class="col-md-4">
                    <select id="metric-select">
                        <option value="CPU">CPU</option>
                        <option value="RAM">RAM</option>
                        <option value="Disk">Disk</option>
                    </select>
                </div>
            </div><br>
        </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
    var myChart;
    function updateChart() {
        var metric = document.getElementById('metric-select').value;
        fetch('/api/data/' + metric)
        .then(response => response.json())
        .then(data => {
            console.log(data);
            data.sort((a, b) => new Date(a[2]) - new Date(b[2]));
            var ctx = document.getElementById('myChart').getContext('2d');
            var dataVM1 = data.filter(item => item[0] === 'VM1');
            var dataVM2 = data.filter(item => item[0] === 'VM2');
            if (myChart) {
                myChart.destroy();
            }
            myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: metric + " Usage VM1",
                        data: dataVM1.map(item => ({x: item[2], y: item[1]})),
                        borderColor: 'rgb(75, 192, 192)',
                        fill: false
                    }, {
                        label: metric + " Usage VM2",
                        data: dataVM2.map(item => ({x: item[2], y: item[1]})),
                        borderColor: 'rgb(255, 99, 132)',
                        fill: false
                    }]
                },
                options: {
                scales: {
                    x: {
                        type: 'time',
                        bounds: 'data',
                        time: {
                            unit: 'minute',
                            stepSize: 5,
                            displayFormats: {
                                minute: 'dd/MM/yyyy HH:mm'
                            },
                            tooltipFormat: 'dd/MM/yyyy HH:mm'
                        },
                        distribution: 'linear',
                        ticks: {
                            callback: function(value, index, ticks) {
                                // Convertir la valeur en un objet Date
                                var date = new Date(value);
                                // Extraire les minutes de la date
                                var minutes = date.getMinutes();
                                // Afficher seulement les labels dont les minutes finissent par 0 ou 5
                                if (minutes % 5 === 0) {
                                    // Formater la date en une chaîne de caractères représentant la date et l'heure
                                    var day = date.getDate();
                                    var month = date.getMonth() + 1; // Les mois sont indexés à partir de 0 en JavaScript
                                    var year = date.getFullYear();
                                    var hour = date.getHours();
                                    var minute = date.getMinutes();
                                    return day + '/' + month + '/' + year + ' ' + hour + ':' + minute;
                                } else {
                                    return '';
                                }
                            }
                        }
                    },
                    y: {
                        ticks: {
                            // Ajouter le signe "%" à l'axe des y
                            callback: function(value, index, values) {
                                return value + '%';
                            }
                        },
                        beginAtZero: true
                    }
                }
            }
            });
        });
    }
    updateChart();
    setInterval(updateChart, 60000);
    document.getElementById('metric-select').addEventListener('change', updateChart);
    </script>
</body>
</html>
